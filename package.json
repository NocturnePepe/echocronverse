{
  "name": "echocronverse",
  "version": "0.1.0",
  "private": true,
  "type": "module",
  "dependencies": {
    "@rainbow-me/rainbowkit": "^2.2.8",
    "@tanstack/react-query": "^5.83.0",
    "@types/react-router-dom": "^5.3.3",
    "ethers": "^6.15.0",
    "framer-motion": "^12.23.9",
    "lucide-react": "^0.525.0",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "react-router-dom": "^7.7.1",
    "viem": "^2.33.1",
    "wagmi": "^2.16.0",
    "zustand": "^5.0.6"
  },
  "devDependencies": {
    "@types/node": "^24.1.0",
    "@types/react": "^19.1.8",
    "@types/react-dom": "^19.1.6",
    "@vitejs/plugin-react": "^4.2.1",
    "autoprefixer": "^10.4.21",
    "postcss": "^8.5.6",
    "tailwindcss": "^3.4.17",
    "typescript": "^5.3.3",
    "vite": "^5.0.0"
  },
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "preview": "vite preview",
    "mesh:start": "node scripts/meshAgent.js",
    "mesh:quick": "node scripts/meshAgent-quick.js", 
    "mesh:status": "node scripts/mesh-status.js",
    "mesh:invoke": "node scripts/invoke-mesh-consciousness.js",
    "mesh:validate": "node scripts/meshAgent-validate.js",
    "mesh:config": "cat .copilot-mesh-config.json 2>/dev/null || echo 'Copilot config not found'",
    "mesh:autorecovery": "node scripts/echomesh-autorecovery.js",
    "restart:mesh": "npm run mesh:autorecovery || npm run mesh:start",
    "phase6c:init": "node src/ai/phase6c/phase6COrchestrator.ts",
    "phase6c:failover": "node src/ai/phase6c/meshFailoverHooks.ts",
    "phase6c:bridge": "node src/ai/phase6c/cronoXAITerminalBridge.ts",
    "phase6f:demo": "node src/ai/phase6f/phase6fDemo.js",
    "phase6f:test": "node src/ai/phase6f/testPhase6F.js",
    "phase73:demo": "node src/ai/phase73/phase73Demo.js",
    "phase73:status": "node -e \"import('./src/ai/phase73/phase73Integration.js').then(m => console.log(JSON.stringify(m.getPhase73Status(), null, 2)));\"",
    "phase73:signal": "node -e \"import('./src/ai/phase73/phase73Integration.js').then(m => m.checkAgentSignal());\"",
    "contracts:build": "forge build",
    "contracts:test": "forge test"
  }
}
